# -*- coding: utf-8 -*-
"""Final Exam: Model Deployment in the Cloud_Soriano

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oItdOB1yunolWlG5_8TLJ9qxz6h0tI3N

**Gabriel Soriano** <br>
**Final Exam: Model Deployment in the Cloud** <br>
**CPE019 - Emerging Technologies 2 in CpE** <br>
**Submitted on: May, 2023** <br>
**Instructor: Dr. Jonathan V. Taylar**

Objective(s):

This activity aims to apply all the learnings for the Final Period. 

Intended Learning Outcomes (ILOs):

* Demonstrate how to train and save a model.
* Demonstrate how to deploy the deep learning model in the cloud. (not Machine Learning model) 
 

Instructions:

You can choose any previous deep learning model. 
Follow the instructions on deploying a model using Streamlit App in the cloud. 

Note: An accessible URL of the APP should be submitted. Also, upload the Github repo link. Strictly no straight copying from the internet.
"""

!pip install streamlit
#!streamlit hello
#Github Link: https://github.com/qgsoriano1/EmTech2_Final-Exam.git

from google.colab import drive
drive.mount('/content/drive')

#Importing the libraries

import os
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from keras.models import Sequential
from keras.layers import Dense, Flatten, Dropout
from keras.callbacks import ModelCheckpoint
from keras.preprocessing.image import ImageDataGenerator
from keras.optimizers import Adam
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelBinarizer
from tensorflow.keras.models import load_model

data_dir = '/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset'
img_size = (224, 224)
batch_size = 24
datagen = ImageDataGenerator(rescale=1./255, validation_split=0.2)
train_generator = datagen.flow_from_directory(data_dir, target_size=img_size, batch_size=batch_size, subset='training')
val_generator = datagen.flow_from_directory(data_dir, target_size=img_size, batch_size=batch_size, subset='validation')

lb = LabelBinarizer()
lb.fit(train_generator.classes)
num_classes = train_generator.num_classes

num_epochs = 100
learning_rate = 0.0001
model = Sequential()
model.add(Flatten(input_shape=train_generator.image_shape))
model.add(Dense(512, activation='relu'))
model.add(Dense(4, activation='sigmoid'))
optimizer = Adam(lr=learning_rate)
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
history = model.fit(train_generator, epochs=num_epochs, validation_data=val_generator)

test_generator = datagen.flow_from_directory(data_dir, target_size=img_size, batch_size=batch_size, subset='validation')

y_true = test_generator.classes
y_pred = model.predict(test_generator)
y_pred = np.argmax(y_pred, axis=1)

print(classification_report(y_true, y_pred, target_names=test_generator.class_indices.keys()))

#number of epochs
num_epochs = 100
learning_rate = 0.0001

#model creation
model = Sequential()
model.add(Flatten(input_shape=train_generator.image_shape))
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes, activation='softmax'))
optimizer = Adam(lr=learning_rate)

model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])
model_path = '/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset Model/best_model.h5'

checkpoint = ModelCheckpoint(model_path, monitor='val_accuracy', verbose=1, save_best_only=True, mode='max')
history = model.fit(train_generator, epochs=num_epochs, validation_data=val_generator, callbacks=[checkpoint])

img = Image.open('/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset/Cloudy/cloudy241.jpg').resize((224, 224))

x = np.array(img) / 255.0
x = np.expand_dims(x, axis=0)
predictions = model.predict(x)
class_names = ['Cloudy', 'Rain', 'Shine', 'Sunrise']
predicted_class = class_names[np.argmax(predictions)]
probability = np.max(predictions)

print(f'Predicted class: {predicted_class}')
print(f'Probability: {probability}')

plt.imshow(img)
plt.show()

img = Image.open('/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset/Rain/rain215.jpg').resize((224, 224))

x = np.array(img) / 255.0
x = np.expand_dims(x, axis=0)
predictions = model.predict(x)
class_names = ['Cloudy', 'Rain', 'Shine', 'Sunrise']
predicted_class = class_names[np.argmax(predictions)]
probability = np.max(predictions)

print(f'Predicted class: {predicted_class}')
print(f'Probability: {probability}')

plt.imshow(img)
plt.show()

img = Image.open('/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset/Shine/shine105.jpg').resize((224, 224))

x = np.array(img) / 255.0
x = np.expand_dims(x, axis=0)
predictions = model.predict(x)
class_names = ['Cloudy', 'Rain', 'Shine', 'Sunrise']
predicted_class = class_names[np.argmax(predictions)]
probability = np.max(predictions)

print(f'Predicted class: {predicted_class}')
print(f'Probability: {probability}')

plt.imshow(img)
plt.show()

model = load_model(model_path)

img = Image.open('/content/drive/MyDrive/Midterm(EMTECH2)/Multi-class Weather Dataset/Sunrise/sunrise2.jpg').resize((224, 224))
x = np.array(img) / 255.0
x = np.expand_dims(x, axis=0)
predictions = model.predict(x)
class_names = ['Cloudy', 'Rain', 'Shine', 'Sunrise']
predicted_class = class_names[np.argmax(predictions)]
probability = np.max(predictions)

print(f'Predicted class: {predicted_class}')
print(f'Probability: {probability}')

plt.imshow(img)
plt.show()